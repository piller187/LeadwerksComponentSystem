<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="stylesheet" type="text/css" href="lcs.css">
	</head>

	<body>
	  <h3>Game Object</h3>
	  <p>The Game Object is more or less a container for Components</br>
		 and is created in runtime by adding a runtime generated script.</br>
		 to an entity. Which entitys that will be Game Object is defined</br>
		 in the LCS project file along with which Message and Components</br>
		 it will handle.</p>
		 
		 <p>The generated script looks like this (with some fictive names)<p>
		 
		 <p style="font-family:courier;font-size:12px;background-color:black;color:white;">
		 <font color="brown">Script</font>.components = {}</br>
		 <font color="brown">Script</font>.speed = 10</br>
		 <font color="brown">Script</font>.message = <font color="green">"Hello World"</font></br>
		 <font color="brown">Script</font>.spawnpos = Vec3(10,2,-100)</br>
		</br>
		function Script:PostStart()</br>
		&emsp;&emsp;Script.Input:doEnable()</br>
		end</br>
		</br>
		function Script:UpdateWorld()</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;&emsp;&emsp;if v.update ~= nil then v:update() end</br>
		&emsp;&emsp;end</br>
		end</br>
		</br>
		function Script:UpdatePhysics()</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;&emsp;&emsp;if v.updatePhysics ~= nil then v:updatePhysics() end</br>
		&emsp;&emsp;end</br>
		end</br>
		</br>
		function Script:Overlap(entity)</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;&emsp;&emsp;if v.updatePhysics ~= nil then v:updatePhysics() end</br>
		&emsp;&emsp;end</br>
		&emsp;&emsp;return Collision.Collide</br>
		end</br>
		</br>
		function Script:Collision(entity, position, normal, speed)</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;&emsp;&emsp;if v.collision ~= nil then v:collision(entity, position, normal, speed) end</br>
		&emsp;&emsp;end</br>
		end</br>
		</br>
		function Script:Draw()</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;&emsp;&emsp;if v.draw ~= nil then v:draw() end</br>
		&emsp;&emsp;end</br>
		end</br>
		</br>
		function Script:DrawEach(camera)</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;if v.drawEach ~= nil then v:drawEach(camera) end</br>
		&emsp;&emsp;end</br>
		end</br>
		</br>
		function Script:PostRender(context)</br>
		&emsp;&emsp;local bm = context:GetBlendMode()</br>
		&emsp;&emsp;context:SetBlendMode(Blend.Alpha)</br>
			</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;&emsp;&emsp;if v.postRender ~= nil then v:postRender(context) end</br>
		&emsp;&emsp;end</br>
			</br>
		&emsp;&emsp;context:SetBlendMode(bm)</br>
		end
		</br>
		function Script:Detach()</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;if v.detach ~= nil then v:detach() end</br>
		&emsp;&emsp;end</br>
		end</br>
		</br>
		function Script:Cleanup()</br>
		&emsp;&emsp;for k,v in pairs(self.components) do</br>
		&emsp;&emsp;if v.cleanup ~= nil then v:cleanup() end</br>
		&emsp;&emsp;end</br>
		end</br>
<p/>
	</body>
</html>
